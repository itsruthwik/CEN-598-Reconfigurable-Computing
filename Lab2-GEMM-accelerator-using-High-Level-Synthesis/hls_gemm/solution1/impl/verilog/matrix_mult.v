// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult_matrix_mult,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.837000,HLS_SYN_LAT=2057,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=354,HLS_SYN_LUT=1204,HLS_VERSION=2023_2}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [7:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [7:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [7:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [7:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [31:0] prod_d0;

reg ap_idle;
reg[7:0] a_address0;
reg a_ce0;
reg[7:0] a_address1;
reg a_ce1;
reg[7:0] b_address0;
reg b_ce0;
reg[7:0] b_address1;
reg b_ce1;
reg prod_ce0;
reg prod_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_subdone;
reg   [0:0] icmp_ln10_reg_1265;
reg    ap_condition_exit_pp0_iter0_stage7;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] reg_407;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_11001;
reg   [7:0] reg_411;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage7_11001;
reg   [7:0] reg_416;
reg   [7:0] reg_420;
reg   [7:0] reg_425;
reg   [7:0] reg_430;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] reg_435;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] reg_440;
reg   [7:0] reg_445;
reg   [7:0] reg_450;
wire   [0:0] icmp_ln10_fu_472_p2;
reg   [4:0] j_load_reg_1269;
wire   [0:0] icmp_ln12_fu_496_p2;
reg   [0:0] icmp_ln12_reg_1274;
wire   [7:0] tmp_cast_fu_514_p3;
reg   [7:0] tmp_cast_reg_1279;
wire   [4:0] select_ln10_fu_543_p3;
reg   [4:0] select_ln10_reg_1304;
wire  signed [6:0] add_ln16_17_fu_584_p2;
reg  signed [6:0] add_ln16_17_reg_1332;
wire   [7:0] zext_ln16_79_fu_615_p1;
reg   [7:0] zext_ln16_79_reg_1352;
reg   [7:0] a_load_15_reg_1403;
wire  signed [5:0] tmp_16_cast_fu_702_p3;
reg  signed [5:0] tmp_16_cast_reg_1408;
wire  signed [6:0] tmp_17_cast_fu_714_p3;
reg  signed [6:0] tmp_17_cast_reg_1419;
reg   [7:0] b_load_13_reg_1434;
reg   [7:0] a_load_1_reg_1449;
wire   [16:0] grp_fu_1176_p3;
reg   [16:0] add_ln16_1_reg_1544;
reg   [7:0] a_load_14_reg_1559;
wire   [7:0] add_ln16_21_fu_952_p2;
reg   [7:0] add_ln16_21_reg_1574;
reg   [7:0] b_load_1_reg_1579;
reg   [7:0] b_load_14_reg_1594;
wire   [16:0] grp_fu_1184_p3;
reg   [16:0] add_ln16_3_reg_1599;
reg   [7:0] a_load_reg_1604;
wire   [17:0] add_ln16_5_fu_1005_p2;
reg   [17:0] add_ln16_5_reg_1624;
wire   [16:0] grp_fu_1201_p3;
reg   [16:0] add_ln16_7_reg_1644;
wire   [17:0] add_ln16_9_fu_1067_p2;
reg   [17:0] add_ln16_9_reg_1664;
wire   [16:0] grp_fu_1218_p3;
reg   [16:0] add_ln16_10_reg_1674;
wire   [18:0] add_ln16_13_fu_1124_p2;
reg   [18:0] add_ln16_13_reg_1684;
wire   [18:0] add_ln16_6_fu_1149_p2;
reg   [18:0] add_ln16_6_reg_1689;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln16_66_fu_528_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_68_fu_554_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln16_70_fu_564_p1;
wire   [63:0] zext_ln16_84_fu_579_p1;
wire   [63:0] zext_ln16_86_fu_590_p1;
wire   [63:0] zext_ln16_72_fu_600_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln16_74_fu_610_p1;
wire   [63:0] zext_ln16_88_fu_624_p1;
wire   [63:0] zext_ln16_90_fu_635_p1;
wire   [63:0] zext_ln16_76_fu_645_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln16_78_fu_655_p1;
wire   [63:0] zext_ln16_92_fu_665_p1;
wire   [63:0] zext_ln16_94_fu_673_p1;
wire   [63:0] zext_ln16_64_fu_683_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln16_65_fu_693_p1;
wire   [63:0] zext_ln16_83_fu_709_p1;
wire   [63:0] zext_ln16_85_fu_721_p1;
wire   [63:0] zext_ln16_67_fu_735_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln16_69_fu_745_p1;
wire   [63:0] zext_ln16_87_fu_757_p1;
wire   [63:0] zext_ln16_89_fu_769_p1;
wire   [63:0] zext_ln16_71_fu_783_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln16_73_fu_793_p1;
wire   [63:0] zext_ln16_91_fu_813_p1;
wire   [63:0] zext_ln16_93_fu_821_p1;
wire   [63:0] zext_ln16_75_fu_849_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln16_77_fu_859_p1;
wire   [63:0] zext_ln16_82_fu_881_p1;
wire   [63:0] zext_ln16_95_fu_889_p1;
wire   [63:0] zext_ln16_63_fu_922_p1;
wire   [63:0] zext_ln12_fu_934_p1;
wire   [63:0] zext_ln16_96_fu_947_p1;
wire   [63:0] zext_ln16_97_fu_1155_p1;
reg   [4:0] j_fu_108;
wire   [4:0] add_ln12_fu_912_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_112;
wire   [4:0] select_ln10_1_fu_502_p3;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [8:0] indvar_flatten_fu_116;
wire   [8:0] add_ln10_1_fu_478_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln10_fu_490_p2;
wire   [3:0] trunc_ln16_fu_510_p1;
wire   [7:0] or_ln16_2_fu_522_p2;
wire   [7:0] or_ln16_4_fu_549_p2;
wire   [7:0] or_ln16_6_fu_559_p2;
wire   [6:0] zext_ln16_80_fu_569_p1;
wire   [6:0] add_ln16_16_fu_573_p2;
wire   [7:0] or_ln16_8_fu_595_p2;
wire   [7:0] or_ln16_10_fu_605_p2;
wire   [7:0] add_ln16_18_fu_618_p2;
wire   [7:0] add_ln16_19_fu_629_p2;
wire   [7:0] or_ln16_12_fu_640_p2;
wire   [7:0] or_ln16_14_fu_650_p2;
wire   [7:0] add_ln16_20_fu_660_p2;
wire  signed [7:0] sext_ln16_2_fu_670_p1;
wire   [7:0] or_ln16_fu_678_p2;
wire   [7:0] or_ln16_1_fu_688_p2;
wire   [7:0] or_ln16_3_fu_730_p2;
wire   [7:0] or_ln16_5_fu_740_p2;
wire  signed [6:0] sext_ln16_fu_754_p1;
wire   [7:0] tmp_19_cast_fu_762_p3;
wire   [7:0] or_ln16_7_fu_778_p2;
wire   [7:0] or_ln16_9_fu_788_p2;
wire   [7:0] tmp_20_cast_fu_806_p3;
wire  signed [7:0] sext_ln16_1_fu_818_p1;
wire   [7:0] mul_ln16_2_fu_830_p0;
wire   [7:0] mul_ln16_2_fu_830_p1;
wire   [15:0] mul_ln16_2_fu_830_p2;
wire   [7:0] or_ln16_11_fu_844_p2;
wire   [7:0] or_ln16_13_fu_854_p2;
wire   [5:0] zext_ln16_81_fu_872_p1;
wire   [5:0] add_ln16_15_fu_875_p2;
wire  signed [7:0] sext_ln16_3_fu_886_p1;
wire   [7:0] mul_ln16_4_fu_898_p0;
wire   [7:0] mul_ln16_4_fu_898_p1;
wire   [15:0] mul_ln16_4_fu_898_p2;
wire   [4:0] xor_ln16_fu_938_p2;
wire  signed [7:0] sext_ln16_4_fu_943_p1;
wire   [7:0] mul_ln16_6_fu_960_p0;
wire   [7:0] mul_ln16_6_fu_960_p1;
wire   [15:0] mul_ln16_6_fu_960_p2;
wire   [7:0] mul_ln16_8_fu_986_p0;
wire   [7:0] mul_ln16_8_fu_986_p1;
wire   [15:0] mul_ln16_8_fu_986_p2;
wire   [16:0] grp_fu_1192_p3;
wire   [17:0] zext_ln16_52_fu_1002_p1;
wire   [17:0] zext_ln16_51_fu_999_p1;
wire   [7:0] mul_ln16_10_fu_1022_p0;
wire   [7:0] mul_ln16_10_fu_1022_p1;
wire   [15:0] mul_ln16_10_fu_1022_p2;
wire   [7:0] mul_ln16_12_fu_1051_p0;
wire   [7:0] mul_ln16_12_fu_1051_p1;
wire   [15:0] mul_ln16_12_fu_1051_p2;
wire   [16:0] grp_fu_1209_p3;
wire   [17:0] zext_ln16_56_fu_1064_p1;
wire   [17:0] zext_ln16_55_fu_1061_p1;
wire   [7:0] mul_ln16_14_fu_1079_p0;
wire   [7:0] mul_ln16_14_fu_1079_p1;
wire   [15:0] mul_ln16_14_fu_1079_p2;
wire   [7:0] mul_ln16_1_fu_1095_p0;
wire   [7:0] mul_ln16_1_fu_1095_p1;
wire   [15:0] mul_ln16_1_fu_1095_p2;
wire   [16:0] grp_fu_1226_p3;
wire   [17:0] zext_ln16_59_fu_1111_p1;
wire   [17:0] zext_ln16_58_fu_1108_p1;
wire   [17:0] add_ln16_12_fu_1114_p2;
wire   [18:0] zext_ln16_60_fu_1120_p1;
wire   [18:0] zext_ln16_57_fu_1105_p1;
wire   [16:0] grp_fu_1235_p3;
wire   [17:0] zext_ln16_49_fu_1133_p1;
wire   [17:0] zext_ln16_48_fu_1130_p1;
wire   [17:0] add_ln16_2_fu_1136_p2;
wire   [18:0] zext_ln16_53_fu_1146_p1;
wire   [18:0] zext_ln16_50_fu_1142_p1;
wire   [19:0] zext_ln16_61_fu_1162_p1;
wire   [19:0] zext_ln16_54_fu_1159_p1;
wire   [19:0] add_ln16_14_fu_1165_p2;
wire   [7:0] grp_fu_1176_p0;
wire   [7:0] grp_fu_1176_p1;
wire   [15:0] grp_fu_1176_p2;
wire   [7:0] grp_fu_1184_p0;
wire   [7:0] grp_fu_1184_p1;
wire   [15:0] grp_fu_1184_p2;
wire   [7:0] grp_fu_1192_p0;
wire   [7:0] grp_fu_1192_p1;
wire   [15:0] grp_fu_1192_p2;
wire   [7:0] grp_fu_1201_p0;
wire   [7:0] grp_fu_1201_p1;
wire   [15:0] grp_fu_1201_p2;
wire   [7:0] grp_fu_1209_p0;
wire   [7:0] grp_fu_1209_p1;
wire   [15:0] grp_fu_1209_p2;
wire   [7:0] grp_fu_1218_p0;
wire   [7:0] grp_fu_1218_p1;
wire   [15:0] grp_fu_1218_p2;
wire   [7:0] grp_fu_1226_p0;
wire   [7:0] grp_fu_1226_p1;
wire   [15:0] grp_fu_1226_p2;
wire   [7:0] grp_fu_1235_p0;
wire   [7:0] grp_fu_1235_p1;
wire   [15:0] grp_fu_1235_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_1176_p00;
wire   [15:0] grp_fu_1176_p10;
wire   [16:0] grp_fu_1176_p20;
wire   [15:0] grp_fu_1184_p00;
wire   [15:0] grp_fu_1184_p10;
wire   [16:0] grp_fu_1184_p20;
wire   [15:0] grp_fu_1192_p00;
wire   [15:0] grp_fu_1192_p10;
wire   [16:0] grp_fu_1192_p20;
wire   [15:0] grp_fu_1201_p00;
wire   [15:0] grp_fu_1201_p10;
wire   [16:0] grp_fu_1201_p20;
wire   [15:0] grp_fu_1209_p00;
wire   [15:0] grp_fu_1209_p10;
wire   [16:0] grp_fu_1209_p20;
wire   [15:0] grp_fu_1218_p00;
wire   [15:0] grp_fu_1218_p10;
wire   [16:0] grp_fu_1218_p20;
wire   [15:0] grp_fu_1226_p00;
wire   [15:0] grp_fu_1226_p10;
wire   [16:0] grp_fu_1226_p20;
wire   [15:0] grp_fu_1235_p00;
wire   [15:0] grp_fu_1235_p10;
wire   [16:0] grp_fu_1235_p20;
wire   [15:0] mul_ln16_10_fu_1022_p00;
wire   [15:0] mul_ln16_10_fu_1022_p10;
wire   [15:0] mul_ln16_12_fu_1051_p00;
wire   [15:0] mul_ln16_12_fu_1051_p10;
wire   [15:0] mul_ln16_14_fu_1079_p00;
wire   [15:0] mul_ln16_14_fu_1079_p10;
wire   [15:0] mul_ln16_1_fu_1095_p00;
wire   [15:0] mul_ln16_1_fu_1095_p10;
wire   [15:0] mul_ln16_2_fu_830_p00;
wire   [15:0] mul_ln16_2_fu_830_p10;
wire   [15:0] mul_ln16_4_fu_898_p00;
wire   [15:0] mul_ln16_4_fu_898_p10;
wire   [15:0] mul_ln16_6_fu_960_p00;
wire   [15:0] mul_ln16_6_fu_960_p10;
wire   [15:0] mul_ln16_8_fu_986_p00;
wire   [15:0] mul_ln16_8_fu_986_p10;
reg    ap_condition_427;
reg    ap_condition_1179;
reg    ap_condition_1183;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_108 = 5'd0;
#0 i_fu_112 = 5'd0;
#0 indvar_flatten_fu_116 = 9'd0;
#0 ap_done_reg = 1'b0;
end

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(mul_ln16_2_fu_830_p0),
    .din1(mul_ln16_2_fu_830_p1),
    .dout(mul_ln16_2_fu_830_p2)
);

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U2(
    .din0(mul_ln16_4_fu_898_p0),
    .din1(mul_ln16_4_fu_898_p1),
    .dout(mul_ln16_4_fu_898_p2)
);

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U3(
    .din0(mul_ln16_6_fu_960_p0),
    .din1(mul_ln16_6_fu_960_p1),
    .dout(mul_ln16_6_fu_960_p2)
);

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U4(
    .din0(mul_ln16_8_fu_986_p0),
    .din1(mul_ln16_8_fu_986_p1),
    .dout(mul_ln16_8_fu_986_p2)
);

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U5(
    .din0(mul_ln16_10_fu_1022_p0),
    .din1(mul_ln16_10_fu_1022_p1),
    .dout(mul_ln16_10_fu_1022_p2)
);

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U6(
    .din0(mul_ln16_12_fu_1051_p0),
    .din1(mul_ln16_12_fu_1051_p1),
    .dout(mul_ln16_12_fu_1051_p2)
);

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U7(
    .din0(mul_ln16_14_fu_1079_p0),
    .din1(mul_ln16_14_fu_1079_p1),
    .dout(mul_ln16_14_fu_1079_p2)
);

matrix_mult_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U8(
    .din0(mul_ln16_1_fu_1095_p0),
    .din1(mul_ln16_1_fu_1095_p1),
    .dout(mul_ln16_1_fu_1095_p2)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1176_p0),
    .din1(grp_fu_1176_p1),
    .din2(grp_fu_1176_p2),
    .ce(1'b1),
    .dout(grp_fu_1176_p3)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1184_p0),
    .din1(grp_fu_1184_p1),
    .din2(grp_fu_1184_p2),
    .ce(1'b1),
    .dout(grp_fu_1184_p3)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1192_p0),
    .din1(grp_fu_1192_p1),
    .din2(grp_fu_1192_p2),
    .ce(1'b1),
    .dout(grp_fu_1192_p3)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1201_p0),
    .din1(grp_fu_1201_p1),
    .din2(grp_fu_1201_p2),
    .ce(1'b1),
    .dout(grp_fu_1201_p3)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1209_p0),
    .din1(grp_fu_1209_p1),
    .din2(grp_fu_1209_p2),
    .ce(1'b1),
    .dout(grp_fu_1209_p3)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1218_p0),
    .din1(grp_fu_1218_p1),
    .din2(grp_fu_1218_p2),
    .ce(1'b1),
    .dout(grp_fu_1218_p3)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1226_p0),
    .din1(grp_fu_1226_p1),
    .din2(grp_fu_1226_p2),
    .ce(1'b1),
    .dout(grp_fu_1226_p3)
);

matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1235_p0),
    .din1(grp_fu_1235_p1),
    .din2(grp_fu_1235_p2),
    .ce(1'b1),
    .dout(grp_fu_1235_p3)
);

matrix_mult_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage7),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage7)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_427)) begin
        if ((icmp_ln10_fu_472_p2 == 1'd0)) begin
            i_fu_112 <= select_ln10_1_fu_502_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_112 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_427)) begin
        if ((icmp_ln10_fu_472_p2 == 1'd0)) begin
            indvar_flatten_fu_116 <= add_ln10_1_fu_478_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_116 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1183)) begin
            j_fu_108 <= 5'd0;
        end else if ((1'b1 == ap_condition_1179)) begin
            j_fu_108 <= add_ln12_fu_912_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        reg_411 <= a_q0;
    end else if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_411 <= a_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_420 <= b_q0;
    end else if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_420 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        reg_425 <= b_q1;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_425 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            reg_430 <= a_q0;
        end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            reg_430 <= a_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_435 <= a_q1;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        reg_435 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        reg_440 <= b_q0;
    end else if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_440 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            reg_445 <= b_q1;
        end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            reg_445 <= b_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_load_14_reg_1559 <= a_q0;
        add_ln16_3_reg_1599 <= grp_fu_1184_p3;
        b_load_14_reg_1594 <= b_q0;
        b_load_1_reg_1579 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        a_load_15_reg_1403 <= a_q0;
        b_load_13_reg_1434 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        a_load_1_reg_1449 <= a_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_load_reg_1604 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln16_10_reg_1674 <= grp_fu_1218_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln16_13_reg_1684 <= add_ln16_13_fu_1124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln16_17_reg_1332 <= add_ln16_17_fu_584_p2;
        add_ln16_5_reg_1624 <= add_ln16_5_fu_1005_p2;
        select_ln10_reg_1304 <= select_ln10_fu_543_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_ln16_1_reg_1544 <= grp_fu_1176_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln16_21_reg_1574 <= add_ln16_21_fu_952_p2;
        icmp_ln10_reg_1265 <= icmp_ln10_fu_472_p2;
        icmp_ln12_reg_1274 <= icmp_ln12_fu_496_p2;
        j_load_reg_1269 <= ap_sig_allocacmp_j_load;
        tmp_cast_reg_1279[7 : 4] <= tmp_cast_fu_514_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_ln16_6_reg_1689 <= add_ln16_6_fu_1149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln16_7_reg_1644 <= grp_fu_1201_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln16_9_reg_1664 <= add_ln16_9_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_407 <= a_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_416 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        reg_450 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_16_cast_reg_1408[4 : 0] <= tmp_16_cast_fu_702_p3[4 : 0];
        tmp_17_cast_reg_1419[4 : 0] <= tmp_17_cast_fu_714_p3[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        zext_ln16_79_reg_1352[4 : 0] <= zext_ln16_79_fu_615_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_address0 = zext_ln16_63_fu_922_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        a_address0 = zext_ln16_77_fu_859_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        a_address0 = zext_ln16_73_fu_793_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        a_address0 = zext_ln16_69_fu_745_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        a_address0 = zext_ln16_65_fu_693_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_address0 = zext_ln16_78_fu_655_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_address0 = zext_ln16_74_fu_610_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_address0 = zext_ln16_70_fu_564_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            a_address1 = zext_ln16_75_fu_849_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            a_address1 = zext_ln16_71_fu_783_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            a_address1 = zext_ln16_67_fu_735_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            a_address1 = zext_ln16_64_fu_683_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            a_address1 = zext_ln16_76_fu_645_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_address1 = zext_ln16_72_fu_600_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_address1 = zext_ln16_68_fu_554_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_address1 = zext_ln16_66_fu_528_p1;
        end else begin
            a_address1 = 'bx;
        end
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1265 == 1'd1) & (1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_108;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_address0 = zext_ln16_96_fu_947_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        b_address0 = zext_ln16_95_fu_889_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        b_address0 = zext_ln16_93_fu_821_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        b_address0 = zext_ln16_89_fu_769_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        b_address0 = zext_ln16_85_fu_721_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        b_address0 = zext_ln16_94_fu_673_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_address0 = zext_ln16_90_fu_635_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_address0 = zext_ln16_86_fu_590_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_address1 = zext_ln12_fu_934_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        b_address1 = zext_ln16_82_fu_881_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        b_address1 = zext_ln16_91_fu_813_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        b_address1 = zext_ln16_87_fu_757_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        b_address1 = zext_ln16_83_fu_709_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        b_address1 = zext_ln16_92_fu_665_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_address1 = zext_ln16_88_fu_624_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_address1 = zext_ln16_84_fu_579_p1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start_int == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_478_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln10_fu_490_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign add_ln12_fu_912_p2 = (select_ln10_reg_1304 + 5'd1);

assign add_ln16_12_fu_1114_p2 = (zext_ln16_59_fu_1111_p1 + zext_ln16_58_fu_1108_p1);

assign add_ln16_13_fu_1124_p2 = (zext_ln16_60_fu_1120_p1 + zext_ln16_57_fu_1105_p1);

assign add_ln16_14_fu_1165_p2 = (zext_ln16_61_fu_1162_p1 + zext_ln16_54_fu_1159_p1);

assign add_ln16_15_fu_875_p2 = (zext_ln16_81_fu_872_p1 + 6'd16);

assign add_ln16_16_fu_573_p2 = (zext_ln16_80_fu_569_p1 + 7'd48);

assign add_ln16_17_fu_584_p2 = ($signed(zext_ln16_80_fu_569_p1) + $signed(7'd80));

assign add_ln16_18_fu_618_p2 = (zext_ln16_79_fu_615_p1 + 8'd112);

assign add_ln16_19_fu_629_p2 = ($signed(zext_ln16_79_fu_615_p1) + $signed(8'd144));

assign add_ln16_20_fu_660_p2 = ($signed(zext_ln16_79_reg_1352) + $signed(8'd176));

assign add_ln16_21_fu_952_p2 = (tmp_cast_reg_1279 + zext_ln16_79_reg_1352);

assign add_ln16_2_fu_1136_p2 = (zext_ln16_49_fu_1133_p1 + zext_ln16_48_fu_1130_p1);

assign add_ln16_5_fu_1005_p2 = (zext_ln16_52_fu_1002_p1 + zext_ln16_51_fu_999_p1);

assign add_ln16_6_fu_1149_p2 = (zext_ln16_53_fu_1146_p1 + zext_ln16_50_fu_1142_p1);

assign add_ln16_9_fu_1067_p2 = (zext_ln16_56_fu_1064_p1 + zext_ln16_55_fu_1061_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1179 = ((icmp_ln10_reg_1265 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7));
end

always @ (*) begin
    ap_condition_1183 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_427 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage7;

assign grp_fu_1176_p0 = grp_fu_1176_p00;

assign grp_fu_1176_p00 = reg_420;

assign grp_fu_1176_p1 = grp_fu_1176_p10;

assign grp_fu_1176_p10 = reg_407;

assign grp_fu_1176_p2 = grp_fu_1176_p20;

assign grp_fu_1176_p20 = mul_ln16_2_fu_830_p2;

assign grp_fu_1184_p0 = grp_fu_1184_p00;

assign grp_fu_1184_p00 = reg_425;

assign grp_fu_1184_p1 = grp_fu_1184_p10;

assign grp_fu_1184_p10 = reg_411;

assign grp_fu_1184_p2 = grp_fu_1184_p20;

assign grp_fu_1184_p20 = mul_ln16_4_fu_898_p2;

assign grp_fu_1192_p0 = grp_fu_1192_p00;

assign grp_fu_1192_p00 = reg_440;

assign grp_fu_1192_p1 = grp_fu_1192_p10;

assign grp_fu_1192_p10 = reg_416;

assign grp_fu_1192_p2 = grp_fu_1192_p20;

assign grp_fu_1192_p20 = mul_ln16_6_fu_960_p2;

assign grp_fu_1201_p0 = grp_fu_1201_p00;

assign grp_fu_1201_p00 = reg_445;

assign grp_fu_1201_p1 = grp_fu_1201_p10;

assign grp_fu_1201_p10 = reg_430;

assign grp_fu_1201_p2 = grp_fu_1201_p20;

assign grp_fu_1201_p20 = mul_ln16_8_fu_986_p2;

assign grp_fu_1209_p0 = grp_fu_1209_p00;

assign grp_fu_1209_p00 = reg_420;

assign grp_fu_1209_p1 = grp_fu_1209_p10;

assign grp_fu_1209_p10 = reg_435;

assign grp_fu_1209_p2 = grp_fu_1209_p20;

assign grp_fu_1209_p20 = mul_ln16_10_fu_1022_p2;

assign grp_fu_1218_p0 = grp_fu_1218_p00;

assign grp_fu_1218_p00 = b_load_13_reg_1434;

assign grp_fu_1218_p1 = grp_fu_1218_p10;

assign grp_fu_1218_p10 = reg_407;

assign grp_fu_1218_p2 = grp_fu_1218_p20;

assign grp_fu_1218_p20 = mul_ln16_12_fu_1051_p2;

assign grp_fu_1226_p0 = grp_fu_1226_p00;

assign grp_fu_1226_p00 = reg_420;

assign grp_fu_1226_p1 = grp_fu_1226_p10;

assign grp_fu_1226_p10 = a_load_15_reg_1403;

assign grp_fu_1226_p2 = grp_fu_1226_p20;

assign grp_fu_1226_p20 = mul_ln16_14_fu_1079_p2;

assign grp_fu_1235_p0 = grp_fu_1235_p00;

assign grp_fu_1235_p00 = reg_440;

assign grp_fu_1235_p1 = grp_fu_1235_p10;

assign grp_fu_1235_p10 = a_load_reg_1604;

assign grp_fu_1235_p2 = grp_fu_1235_p20;

assign grp_fu_1235_p20 = mul_ln16_1_fu_1095_p2;

assign icmp_ln10_fu_472_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_496_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign mul_ln16_10_fu_1022_p0 = mul_ln16_10_fu_1022_p00;

assign mul_ln16_10_fu_1022_p00 = reg_445;

assign mul_ln16_10_fu_1022_p1 = mul_ln16_10_fu_1022_p10;

assign mul_ln16_10_fu_1022_p10 = reg_430;

assign mul_ln16_12_fu_1051_p0 = mul_ln16_12_fu_1051_p00;

assign mul_ln16_12_fu_1051_p00 = reg_450;

assign mul_ln16_12_fu_1051_p1 = mul_ln16_12_fu_1051_p10;

assign mul_ln16_12_fu_1051_p10 = reg_435;

assign mul_ln16_14_fu_1079_p0 = mul_ln16_14_fu_1079_p00;

assign mul_ln16_14_fu_1079_p00 = b_load_14_reg_1594;

assign mul_ln16_14_fu_1079_p1 = mul_ln16_14_fu_1079_p10;

assign mul_ln16_14_fu_1079_p10 = a_load_14_reg_1559;

assign mul_ln16_1_fu_1095_p0 = mul_ln16_1_fu_1095_p00;

assign mul_ln16_1_fu_1095_p00 = b_load_1_reg_1579;

assign mul_ln16_1_fu_1095_p1 = mul_ln16_1_fu_1095_p10;

assign mul_ln16_1_fu_1095_p10 = a_load_1_reg_1449;

assign mul_ln16_2_fu_830_p0 = mul_ln16_2_fu_830_p00;

assign mul_ln16_2_fu_830_p00 = reg_425;

assign mul_ln16_2_fu_830_p1 = mul_ln16_2_fu_830_p10;

assign mul_ln16_2_fu_830_p10 = reg_411;

assign mul_ln16_4_fu_898_p0 = mul_ln16_4_fu_898_p00;

assign mul_ln16_4_fu_898_p00 = reg_450;

assign mul_ln16_4_fu_898_p1 = mul_ln16_4_fu_898_p10;

assign mul_ln16_4_fu_898_p10 = reg_411;

assign mul_ln16_6_fu_960_p0 = mul_ln16_6_fu_960_p00;

assign mul_ln16_6_fu_960_p00 = reg_425;

assign mul_ln16_6_fu_960_p1 = mul_ln16_6_fu_960_p10;

assign mul_ln16_6_fu_960_p10 = reg_416;

assign mul_ln16_8_fu_986_p0 = mul_ln16_8_fu_986_p00;

assign mul_ln16_8_fu_986_p00 = reg_440;

assign mul_ln16_8_fu_986_p1 = mul_ln16_8_fu_986_p10;

assign mul_ln16_8_fu_986_p10 = reg_411;

assign or_ln16_10_fu_605_p2 = (tmp_cast_reg_1279 | 8'd11);

assign or_ln16_11_fu_844_p2 = (tmp_cast_reg_1279 | 8'd12);

assign or_ln16_12_fu_640_p2 = (tmp_cast_reg_1279 | 8'd13);

assign or_ln16_13_fu_854_p2 = (tmp_cast_reg_1279 | 8'd14);

assign or_ln16_14_fu_650_p2 = (tmp_cast_reg_1279 | 8'd15);

assign or_ln16_1_fu_688_p2 = (tmp_cast_reg_1279 | 8'd2);

assign or_ln16_2_fu_522_p2 = (tmp_cast_fu_514_p3 | 8'd3);

assign or_ln16_3_fu_730_p2 = (tmp_cast_reg_1279 | 8'd4);

assign or_ln16_4_fu_549_p2 = (tmp_cast_reg_1279 | 8'd5);

assign or_ln16_5_fu_740_p2 = (tmp_cast_reg_1279 | 8'd6);

assign or_ln16_6_fu_559_p2 = (tmp_cast_reg_1279 | 8'd7);

assign or_ln16_7_fu_778_p2 = (tmp_cast_reg_1279 | 8'd8);

assign or_ln16_8_fu_595_p2 = (tmp_cast_reg_1279 | 8'd9);

assign or_ln16_9_fu_788_p2 = (tmp_cast_reg_1279 | 8'd10);

assign or_ln16_fu_678_p2 = (tmp_cast_reg_1279 | 8'd1);

assign prod_address0 = zext_ln16_97_fu_1155_p1;

assign prod_d0 = add_ln16_14_fu_1165_p2;

assign select_ln10_1_fu_502_p3 = ((icmp_ln12_fu_496_p2[0:0] == 1'b1) ? add_ln10_fu_490_p2 : ap_sig_allocacmp_i_load);

assign select_ln10_fu_543_p3 = ((icmp_ln12_reg_1274[0:0] == 1'b1) ? 5'd0 : j_load_reg_1269);

assign sext_ln16_1_fu_818_p1 = tmp_17_cast_reg_1419;

assign sext_ln16_2_fu_670_p1 = add_ln16_17_reg_1332;

assign sext_ln16_3_fu_886_p1 = tmp_16_cast_reg_1408;

assign sext_ln16_4_fu_943_p1 = $signed(xor_ln16_fu_938_p2);

assign sext_ln16_fu_754_p1 = tmp_16_cast_reg_1408;

assign tmp_16_cast_fu_702_p3 = {{1'd1}, {select_ln10_reg_1304}};

assign tmp_17_cast_fu_714_p3 = {{2'd2}, {select_ln10_reg_1304}};

assign tmp_19_cast_fu_762_p3 = {{3'd4}, {select_ln10_reg_1304}};

assign tmp_20_cast_fu_806_p3 = {{3'd5}, {select_ln10_reg_1304}};

assign tmp_cast_fu_514_p3 = {{trunc_ln16_fu_510_p1}, {4'd0}};

assign trunc_ln16_fu_510_p1 = select_ln10_1_fu_502_p3[3:0];

assign xor_ln16_fu_938_p2 = (select_ln10_reg_1304 ^ 5'd16);

assign zext_ln12_fu_934_p1 = select_ln10_reg_1304;

assign zext_ln16_48_fu_1130_p1 = grp_fu_1235_p3;

assign zext_ln16_49_fu_1133_p1 = add_ln16_1_reg_1544;

assign zext_ln16_50_fu_1142_p1 = add_ln16_2_fu_1136_p2;

assign zext_ln16_51_fu_999_p1 = add_ln16_3_reg_1599;

assign zext_ln16_52_fu_1002_p1 = grp_fu_1192_p3;

assign zext_ln16_53_fu_1146_p1 = add_ln16_5_reg_1624;

assign zext_ln16_54_fu_1159_p1 = add_ln16_6_reg_1689;

assign zext_ln16_55_fu_1061_p1 = add_ln16_7_reg_1644;

assign zext_ln16_56_fu_1064_p1 = grp_fu_1209_p3;

assign zext_ln16_57_fu_1105_p1 = add_ln16_9_reg_1664;

assign zext_ln16_58_fu_1108_p1 = add_ln16_10_reg_1674;

assign zext_ln16_59_fu_1111_p1 = grp_fu_1226_p3;

assign zext_ln16_60_fu_1120_p1 = add_ln16_12_fu_1114_p2;

assign zext_ln16_61_fu_1162_p1 = add_ln16_13_reg_1684;

assign zext_ln16_63_fu_922_p1 = tmp_cast_reg_1279;

assign zext_ln16_64_fu_683_p1 = or_ln16_fu_678_p2;

assign zext_ln16_65_fu_693_p1 = or_ln16_1_fu_688_p2;

assign zext_ln16_66_fu_528_p1 = or_ln16_2_fu_522_p2;

assign zext_ln16_67_fu_735_p1 = or_ln16_3_fu_730_p2;

assign zext_ln16_68_fu_554_p1 = or_ln16_4_fu_549_p2;

assign zext_ln16_69_fu_745_p1 = or_ln16_5_fu_740_p2;

assign zext_ln16_70_fu_564_p1 = or_ln16_6_fu_559_p2;

assign zext_ln16_71_fu_783_p1 = or_ln16_7_fu_778_p2;

assign zext_ln16_72_fu_600_p1 = or_ln16_8_fu_595_p2;

assign zext_ln16_73_fu_793_p1 = or_ln16_9_fu_788_p2;

assign zext_ln16_74_fu_610_p1 = or_ln16_10_fu_605_p2;

assign zext_ln16_75_fu_849_p1 = or_ln16_11_fu_844_p2;

assign zext_ln16_76_fu_645_p1 = or_ln16_12_fu_640_p2;

assign zext_ln16_77_fu_859_p1 = or_ln16_13_fu_854_p2;

assign zext_ln16_78_fu_655_p1 = or_ln16_14_fu_650_p2;

assign zext_ln16_79_fu_615_p1 = select_ln10_reg_1304;

assign zext_ln16_80_fu_569_p1 = select_ln10_fu_543_p3;

assign zext_ln16_81_fu_872_p1 = select_ln10_reg_1304;

assign zext_ln16_82_fu_881_p1 = add_ln16_15_fu_875_p2;

assign zext_ln16_83_fu_709_p1 = $unsigned(tmp_16_cast_fu_702_p3);

assign zext_ln16_84_fu_579_p1 = add_ln16_16_fu_573_p2;

assign zext_ln16_85_fu_721_p1 = $unsigned(tmp_17_cast_fu_714_p3);

assign zext_ln16_86_fu_590_p1 = $unsigned(add_ln16_17_fu_584_p2);

assign zext_ln16_87_fu_757_p1 = $unsigned(sext_ln16_fu_754_p1);

assign zext_ln16_88_fu_624_p1 = add_ln16_18_fu_618_p2;

assign zext_ln16_89_fu_769_p1 = tmp_19_cast_fu_762_p3;

assign zext_ln16_90_fu_635_p1 = add_ln16_19_fu_629_p2;

assign zext_ln16_91_fu_813_p1 = tmp_20_cast_fu_806_p3;

assign zext_ln16_92_fu_665_p1 = add_ln16_20_fu_660_p2;

assign zext_ln16_93_fu_821_p1 = $unsigned(sext_ln16_1_fu_818_p1);

assign zext_ln16_94_fu_673_p1 = $unsigned(sext_ln16_2_fu_670_p1);

assign zext_ln16_95_fu_889_p1 = $unsigned(sext_ln16_3_fu_886_p1);

assign zext_ln16_96_fu_947_p1 = $unsigned(sext_ln16_4_fu_943_p1);

assign zext_ln16_97_fu_1155_p1 = add_ln16_21_reg_1574;

always @ (posedge ap_clk) begin
    tmp_cast_reg_1279[3:0] <= 4'b0000;
    zext_ln16_79_reg_1352[7:5] <= 3'b000;
    tmp_16_cast_reg_1408[5] <= 1'b1;
    tmp_17_cast_reg_1419[6:5] <= 2'b10;
end

endmodule //matrix_mult
